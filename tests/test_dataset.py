# Copyright (C) 2017-2022  Cleanlab Inc.
# This file is part of cleanlab.
#
# cleanlab is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cleanlab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with cleanlab.  If not, see <https://www.gnu.org/licenses/>.

import requests
import pytest
import io
import numpy as np
from cleanlab import dataset

cifar100 = [
    "apple",
    "aquarium_fish",
    "baby",
    "bear",
    "beaver",
    "bed",
    "bee",
    "beetle",
    "bicycle",
    "bottle",
    "bowl",
    "boy",
    "bridge",
    "bus",
    "butterfly",
    "camel",
    "can",
    "castle",
    "caterpillar",
    "cattle",
    "chair",
    "chimpanzee",
    "clock",
    "cloud",
    "cockroach",
    "couch",
    "crab",
    "crocodile",
    "cup",
    "dinosaur",
    "dolphin",
    "elephant",
    "flatfish",
    "forest",
    "fox",
    "girl",
    "hamster",
    "house",
    "kangaroo",
    "keyboard",
    "lamp",
    "lawn_mower",
    "leopard",
    "lion",
    "lizard",
    "lobster",
    "man",
    "maple_tree",
    "motorcycle",
    "mountain",
    "mouse",
    "mushroom",
    "oak_tree",
    "orange",
    "orchid",
    "otter",
    "palm_tree",
    "pear",
    "pickup_truck",
    "pine_tree",
    "plain",
    "plate",
    "poppy",
    "porcupine",
    "possum",
    "rabbit",
    "raccoon",
    "ray",
    "road",
    "rocket",
    "rose",
    "sea",
    "seal",
    "shark",
    "shrew",
    "skunk",
    "skyscraper",
    "snail",
    "snake",
    "spider",
    "squirrel",
    "streetcar",
    "sunflower",
    "sweet_pepper",
    "table",
    "tank",
    "telephone",
    "television",
    "tiger",
    "tractor",
    "train",
    "trout",
    "tulip",
    "turtle",
    "wardrobe",
    "whale",
    "willow_tree",
    "wolf",
    "woman",
    "worm",
]
caltech256 = [
    "ak47",
    "american-flag",
    "backpack",
    "baseball-bat",
    "baseball-glove",
    "basketball-hoop",
    "bat",
    "bathtub",
    "bear",
    "beer-mug",
    "billiards",
    "binoculars",
    "birdbath",
    "blimp",
    "bonsai",
    "boom-box",
    "bowling-ball",
    "bowling-pin",
    "boxing-glove",
    "brain",
    "breadmaker",
    "buddha",
    "bulldozer",
    "butterfly",
    "cactus",
    "cake",
    "calculator",
    "camel",
    "cannon",
    "canoe",
    "car-tire",
    "cartman",
    "cd",
    "centipede",
    "cereal-box",
    "chandelier",
    "chess-board",
    "chimp",
    "chopsticks",
    "cockroach",
    "coffee-mug",
    "coffin",
    "coin",
    "comet",
    "computer-keyboard",
    "computer-monitor",
    "computer-mouse",
    "conch",
    "cormorant",
    "covered-wagon",
    "cowboy-hat",
    "crab",
    "desk-globe",
    "diamond-ring",
    "dice",
    "dog",
    "dolphin",
    "doorknob",
    "drinking-straw",
    "duck",
    "dumb-bell",
    "eiffel-tower",
    "electric-guitar",
    "elephant",
    "elk",
    "ewer",
    "eyeglasses",
    "fern",
    "fighter-jet",
    "fire-extinguisher",
    "fire-hydrant",
    "fire-truck",
    "fireworks",
    "flashlight",
    "floppy-disk",
    "football-helmet",
    "french-horn",
    "fried-egg",
    "frisbee",
    "frog",
    "frying-pan",
    "galaxy",
    "gas-pump",
    "giraffe",
    "goat",
    "golden-gate-bridge",
    "goldfish",
    "golf-ball",
    "goose",
    "gorilla",
    "grand-piano",
    "grapes",
    "grasshopper",
    "guitar-pick",
    "hamburger",
    "hammock",
    "harmonica",
    "harp",
    "harpsichord",
    "hawksbill",
    "head-phones",
    "helicopter",
    "hibiscus",
    "homer-simpson",
    "horse",
    "horseshoe-crab",
    "hot-air-balloon",
    "hot-dog",
    "hot-tub",
    "hourglass",
    "house-fly",
    "human-skeleton",
    "hummingbird",
    "ibis",
    "ice-cream-cone",
    "iguana",
    "ipod",
    "iris",
    "jesus-christ",
    "joy-stick",
    "kangaroo",
    "kayak",
    "ketch",
    "killer-whale",
    "knife",
    "ladder",
    "laptop",
    "lathe",
    "leopards",
    "license-plate",
    "lightbulb",
    "light-house",
    "lightning",
    "llama",
    "mailbox",
    "mandolin",
    "mars",
    "mattress",
    "megaphone",
    "menorah",
    "microscope",
    "microwave",
    "minaret",
    "minotaur",
    "motorbikes",
    "mountain-bike",
    "mushroom",
    "mussels",
    "necktie",
    "octopus",
    "ostrich",
    "owl",
    "palm-pilot",
    "palm-tree",
    "paperclip",
    "paper-shredder",
    "pci-card",
    "penguin",
    "people",
    "pez-dispenser",
    "photocopier",
    "picnic-table",
    "playing-card",
    "porcupine",
    "pram",
    "praying-mantis",
    "pyramid",
    "raccoon",
    "radio-telescope",
    "rainbow",
    "refrigerator",
    "revolver",
    "rifle",
    "rotary-phone",
    "roulette-wheel",
    "saddle",
    "saturn",
    "school-bus",
    "scorpion",
    "screwdriver",
    "segway",
    "self-propelled-lawn-mower",
    "sextant",
    "sheet-music",
    "skateboard",
    "skunk",
    "skyscraper",
    "smokestack",
    "snail",
    "snake",
    "sneaker",
    "snowmobile",
    "soccer-ball",
    "socks",
    "soda-can",
    "spaghetti",
    "speed-boat",
    "spider",
    "spoon",
    "stained-glass",
    "starfish",
    "steering-wheel",
    "stirrups",
    "sunflower",
    "superman",
    "sushi",
    "swan",
    "swiss-army-knife",
    "sword",
    "syringe",
    "tambourine",
    "teapot",
    "teddy-bear",
    "teepee",
    "telephone-box",
    "tennis-ball",
    "tennis-court",
    "tennis-racket",
    "theodolite",
    "toaster",
    "tomato",
    "tombstone",
    "top-hat",
    "touring-bike",
    "tower-pisa",
    "traffic-light",
    "treadmill",
    "triceratops",
    "tricycle",
    "trilobite",
    "tripod",
    "t-shirt",
    "tuning-fork",
    "tweezer",
    "umbrella",
    "unicorn",
    "vcr",
    "video-projector",
    "washing-machine",
    "watch",
    "waterfall",
    "watermelon",
    "welding-mask",
    "wheelbarrow",
    "windmill",
    "wine-bottle",
    "xylophone",
    "yarmulke",
    "yo-yo",
    "zebra",
    "airplanes",
    "car-side",
    "faces-easy",
    "greyhound",
    "tennis-shoes",
    "toad",
]
imdb = ["Negative", "Positive"]
mnist = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

urls = {
    "caltech256": [
        "https://github.com/cleanlab/label-errors/raw/5392f6c71473055060be3044becdde1cbc18284d/"
        "original_test_labels/caltech256_original_labels.npy",
        "https://github.com/cleanlab/label-errors/raw/5392f6c71473055060be3044becdde1cbc18284d"
        "/cross_validated_predicted_probabilities/caltech256_pyx.npy",
    ],
    "mnist": [
        "https://github.com/cleanlab/label-errors/raw/5392f6c71473055060be3044becdde1cbc18284d"
        "/original_test_labels/mnist_test_set_original_labels.npy",
        "https://github.com/cleanlab/label-errors/raw/5392f6c71473055060be3044becdde1cbc18284d"
        "/cross_validated_predicted_probabilities/mnist_test_set_pyx.npy",
    ],
    "imdb": [
        "https://github.com/cleanlab/label-errors/raw"
        "/5392f6c71473055060be3044becdde1cbc18284d/original_test_labels"
        "/imdb_test_set_original_labels.npy",
        "https://github.com/cleanlab/label-errors/raw/5392f6c71473055060be3044becdde1cbc18284d"
        "/cross_validated_predicted_probabilities/imdb_test_set_pyx.npy",
    ],
    "cifar100": [
        "https://github.com/cleanlab/label-errors/raw/5392f6c71473055060be3044becdde1cbc18284d"
        "/original_test_labels/cifar100_test_set_original_labels.npy",
        "https://github.com/cleanlab/label-errors/raw/5392f6c71473055060be3044becdde1cbc18284d"
        "/cross_validated_predicted_probabilities/cifar100_test_set_pyx.npy",
    ],
}


@pytest.mark.parametrize("dataset_name", ["mnist", "caltech256", "cifar100", "imdb"])
def test_real_datasets(dataset_name):
    print("\n" + dataset_name.capitalize() + "\n")
    class_names = eval(dataset_name)
    labels_url, pred_probs_url = urls[dataset_name]
    response = requests.get(pred_probs_url)
    response.raise_for_status()
    pred_probs = np.load(io.BytesIO(response.content), allow_pickle=True)
    response = requests.get(labels_url)
    response.raise_for_status()
    labels = np.load(io.BytesIO(response.content), allow_pickle=True)
    dataset.health_summary(pred_probs=pred_probs, labels=labels, class_names=class_names)
